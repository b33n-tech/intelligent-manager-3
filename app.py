import streamlit as st
from datetime import datetime

st.set_page_config(page_title="Intelligent Manager MVP", layout="wide")

st.title("Intelligent Manager (MVP Dump + 2 Prompts)")
st.write("Interface simple : input continu + prompts automatiques pour LLM")

# --- Initialisation de la session ---
if "elements" not in st.session_state:
    st.session_state.elements = []  # Liste des √©l√©ments initiaux
if "actualisations" not in st.session_state:
    st.session_state.actualisations = []  # Liste des ajouts post-envoi
if "prepared_output" not in st.session_state:
    st.session_state.prepared_output = ""  # Texte coll√© depuis LLM apr√®s prompt 1
if "final_output" not in st.session_state:
    st.session_state.final_output = ""  # Texte coll√© depuis LLM apr√®s prompt 2

# --- Step 1 : Input des √©l√©ments ---
st.subheader("Ajouter de nouveaux √©l√©ments / actualisations")
cols = st.columns([6,1])
new_input = cols[0].text_input("Nouvel √©l√©ment", key="new_input")
add_button = cols[1].button("‚ûï Ajouter")

if add_button and new_input.strip() != "":
    if not st.session_state.elements or st.session_state.prepared_output == "":
        st.session_state.elements.append(new_input.strip())
    else:
        st.session_state.actualisations.append(new_input.strip())

# --- Affichage des √©l√©ments ---
st.subheader("√âl√©ments cumul√©s")
with st.expander("√âl√©ments initiaux"):
    for idx, el in enumerate(st.session_state.elements, 1):
        st.write(f"{idx}. {el}")

if st.session_state.actualisations:
    with st.expander("Actualisations / ajouts post-prep"):
        for idx, el in enumerate(st.session_state.actualisations, 1):
            st.write(f"{idx}. {el}")

# --- Prompt 1 : Pr√©paration des √©l√©ments de travail ---
st.subheader("Prompt 1 : Pr√©paration des √©l√©ments de travail")
prompt1 = "# PROMPT ‚Äî PR√âPARATION DES √âL√âMENTS DE TRAVAIL\n"
prompt1 += "Contexte : Tu es un assistant d‚Äôanalyse et de pr√©paration de travail. On t‚Äôenvoie une liste d‚Äô√©l√©ments bruts : t√¢ches, missions, id√©es, to-do‚Ä¶ Ton r√¥le est de clarifier, reformuler, et d√©cortiquer chaque sujet pour en faire une base exploitable de travail.\n\n"
prompt1 += "Objectif : Pour chaque sujet, tu dois produire une fiche de travail concise et op√©rationnelle, sous la trame suivante :\n---\nN¬∞ sujet : [num√©ro]\nDescription initiale : [copie brute de l‚Äôinput]\nReformulation : [formule claire, concise]\nSous-actions : [liste s√©quentielle d‚Äôactions]\nD√©pendances cach√©es : [√©l√©ments implicites, pr√©requis, ressources]\n---\nContraintes : Ton sec, net, sans √©motion. ‚ö†Ô∏è √Ä clarifier si n√©cessaire.\n\n"
prompt1 += "Maintenant, traite chaque sujet de la liste ci-dessous :\n\n"
for idx, el in enumerate(st.session_state.elements + st.session_state.actualisations, 1):
    prompt1 += f"Sujet {idx} : {el}\n"

st.text_area("Prompt 1 LLM (copypaste pour traitement)", prompt1, height=300)

# --- Zone pour coller output LLM pr√©paration ---
st.subheader("Coller le retour LLM (Prompt 1)")
prepared_input = st.text_area("Retour LLM (pr√©paration)", st.session_state.prepared_output, height=200)
update_prepared = st.button("üíæ Mettre √† jour pr√©paration")

if update_prepared:
    st.session_state.prepared_output = prepared_input

# --- Prompt 2 : S√©quen√ßage et priorisation ---
st.subheader("Prompt 2 : S√©quen√ßage et priorisation")
prompt2 = "# PROMPT ‚Äî ANALYSE, S√âQUEN√áAGE ET PRIORISATION\n"
prompt2 += "Contexte : Tu re√ßois une s√©rie de fiches de travail pr√©par√©es (une par sujet). Ton r√¥le est de les traiter comme un syst√®me d‚Äôop√©rations pour d√©gager une s√©quence optimis√©e.\n\n"
prompt2 += "Objectif : Hi√©rarchiser, ordonner et optimiser toutes les actions pour qu‚Äôun op√©rateur humain puisse ex√©cuter la s√©quence sans h√©sitation.\n\n"
prompt2 += "Fiches √† traiter :\n"
prompt2 += st.session_state.prepared_output + "\n\n"
prompt2 += "Produis l'output selon la trame :\n1Ô∏è‚É£ Synth√®se op√©rationnelle\n2Ô∏è‚É£ S√©quen√ßage logique\n3Ô∏è‚É£ Optimisation & simplification\n4Ô∏è‚É£ Jalons cl√©s\n5Ô∏è‚É£ Recommandation d‚Äôex√©cution\n\nConstraints : Lisible, copiable, sans pr√©ambule.\n"

st.text_area("Prompt 2 LLM (copypaste pour traitement)", prompt2, height=300)

# --- Zone pour coller output LLM final ---
st.subheader("Coller le retour LLM (Prompt 2)")
final_input = st.text_area("Retour LLM final", st.session_state.final_output, height=200)
update_final = st.button("üíæ Mettre √† jour plan final")

if update_final:
    st.session_state.final_output = final_input

# --- Historique / affichage final ---
st.subheader("Historique / Output complet")
st.write(f"Date : {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
st.text_area("Output final LLM cumulatif", st.session_state.final_output, height=300)
